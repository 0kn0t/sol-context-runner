name: Generate sol-context from external repo

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "GitHub repository (owner/repo), e.g., openzeppelin/openzeppelin-contracts"
        required: true
      branch:
        description: "Branch to checkout (optional)"
        required: false
        default: "main"

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      OUTPUT_ROOT: outputs

    steps:
      - name: Checkout runner repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          persist-credentials: true
          path: runner

      - name: Prepare workspace
        run: mkdir -p work
        shell: bash

      - name: Clone target repository (supports private repos)
        id: clone
        run: |
          set -e
          REPO="${{ github.event.inputs.repo }}"
          BRANCH="${{ github.event.inputs.branch }}"
          TARGET_DIR="work/target_repo"
          echo "Cloning ${REPO} branch ${BRANCH}..."
          git clone --branch "$BRANCH" \
            "https://x-access-token:${{ secrets.PAT }}@github.com/${REPO}.git" "$TARGET_DIR"
          cd "$TARGET_DIR"
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "repo_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_HASH" >> $GITHUB_OUTPUT
        shell: bash

      - name: Skip if output already exists
        id: check-existing
        run: |
          REPO="${{ github.event.inputs.repo }}"
          COMMIT="${{ steps.clone.outputs.commit }}"
          DEST_DIR="runner/${OUTPUT_ROOT}/${REPO}@${COMMIT}"
          TARFILE="runner/${OUTPUT_ROOT}/${REPO}@${COMMIT}.tar.gz"
          if [ -d "$DEST_DIR" ] || [ -f "$TARFILE" ]; then
            echo "Output for ${REPO}@${COMMIT} already exists. Skipping generation."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Stop if already generated
        if: steps.check-existing.outputs.skip == 'true'
        run: |
          echo "Skipping â€” already generated for this commit."
          exit 0
        shell: bash

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Node deps (if package.json exists)
        run: |
          cd ${{ steps.clone.outputs.repo_dir }}
          if [ -f package.json ]; then
            npm ci || npm install
          fi
          forge build --sizes
        shell: bash

      - name: Run sol-context generator
        run: |
          cd ${{ steps.clone.outputs.repo_dir }}
          npx --yes sol-context
        shell: bash

      - name: Package and copy outputs
        run: |
          set -e
          REPO="${{ github.event.inputs.repo }}"
          COMMIT="${{ steps.clone.outputs.commit }}"
          SRC="${{ steps.clone.outputs.repo_dir }}/context_output"
          DEST_DIR="runner/${OUTPUT_ROOT}/${REPO}@${COMMIT}"
          TARFILE="runner/${OUTPUT_ROOT}/${REPO}@${COMMIT}.tar.gz"

          mkdir -p "$DEST_DIR"
          if [ -d "$SRC" ]; then
            cp -r "$SRC"/. "$DEST_DIR"/
            echo "Compressing..."
            tar -czf "$TARFILE" -C "runner/${OUTPUT_ROOT}" "${REPO}@${COMMIT}"
          else
            echo "No context_output directory found, creating placeholder."
            echo "{}" > "$DEST_DIR/empty.txt"
            tar -czf "$TARFILE" -C "runner/${OUTPUT_ROOT}" "${REPO}@${COMMIT}"
          fi
        shell: bash

      - name: Commit and push new output
        run: |
          set -e
          cd runner
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add ${OUTPUT_ROOT}
          git commit -m "chore: add sol-context for ${{ github.event.inputs.repo }}@${{ steps.clone.outputs.commit }}" || echo "No changes to commit"
          git push
        shell: bash
